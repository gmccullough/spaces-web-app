import { NextRequest, NextResponse } from 'next/server';
import { createServerSupabase } from '@/app/lib/supabase/server';
import { readManifest, writeManifest } from '@/app/lib/spaces/manifest';
import { normalizeSegment } from '@/app/lib/spaces/paths';

export async function GET(_req: NextRequest, { params }: { params: { name: string } }) {
  let userId: string | undefined;
  try {
    const supabase = await createServerSupabase();
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return NextResponse.json({ error: { code: 'UNAUTHORIZED', message: 'Unauthorized' } }, { status: 401 });
    }
    userId = user.id;
    const spaceName = normalizeSegment(params.name);
    const manifest = await readManifest(userId, spaceName);
    if (!manifest) {
      return NextResponse.json({ error: { code: 'NOT_FOUND', message: 'Manifest not found' } }, { status: 404 });
    }
    return NextResponse.json({ manifest }, { status: 200 });
  } catch (err: any) {
    console.error('[GET /api/spaces/[name]/manifest] error', {
      userId,
      spaceName: params?.name,
      name: err?.name,
      code: err?.code,
      status: err?.status,
      message: err?.message,
      stack: err?.stack,
    });
    const status = err?.status || 500;
    const code = err?.code || err?.name || 'INTERNAL_ERROR';
    return NextResponse.json({ error: { code, message: err?.message || 'Internal Error' } }, { status });
  }
}

export async function PATCH(req: NextRequest, { params }: { params: { name: string } }) {
  let userId: string | undefined;
  let spaceName: string | undefined;
  try {
    const supabase = await createServerSupabase();
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return NextResponse.json({ error: { code: 'UNAUTHORIZED', message: 'Unauthorized' } }, { status: 401 });
    }
    userId = user.id;
    spaceName = normalizeSegment(params.name);
    const body = await req.json().catch(() => null);
    const isNameAutoGenerated = body?.isNameAutoGenerated;
    if (typeof isNameAutoGenerated !== 'boolean') {
      return NextResponse.json({ error: { code: 'INVALID_REQUEST', message: "Missing or invalid 'isNameAutoGenerated'" } }, { status: 400 });
    }
    const existing = await readManifest(userId, spaceName);
    if (!existing) {
      return NextResponse.json({ error: { code: 'NOT_FOUND', message: 'Manifest not found' } }, { status: 404 });
    }
    const updated = { ...existing, is_name_auto_generated: isNameAutoGenerated };
    await writeManifest(userId, spaceName, updated);
    return NextResponse.json({ manifest: updated }, { status: 200 });
  } catch (err: any) {
    console.error('[PATCH /api/spaces/[name]/manifest] error', {
      userId,
      spaceName,
      name: err?.name,
      code: err?.code,
      status: err?.status,
      message: err?.message,
      stack: err?.stack,
    });
    const status = err?.status || 500;
    const code = err?.code || err?.name || 'INTERNAL_ERROR';
    return NextResponse.json({ error: { code, message: err?.message || 'Internal Error' } }, { status });
  }
}
